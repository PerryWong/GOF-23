package com.perry.pattern.pattern.structural.adapter;

/**
 * 适配器模式：
 *      将一个类的接口转换成客户期望的另一个接口，使原本接口不兼容的类可以一起工作
 * 类型：结构型
 *
 * 适用场景：
 *      1.已经存在的类，它的方法和需求不匹配时（方法结果相同或相似）
 *      2.不是软件设计阶段考虑的设计模式，是随着软件维护，由于不同产品、不同厂家造成功能类似而接口不同的情况下的解决方案
 *
 * 优点：
 *      1.能提高类的透明性和复用，现有的类复用但不需要改变
 *      2.目标类和适配器类解耦，提高程序扩展性
 *      3.符合开闭原则
 *
 * 缺点：
 *      1.适配器编写过程需要全面考虑，可能会增加系统的复杂性
 *      2.增加系统代码可读的难度
 *
 * 扩展：
 *      对象适配器---符合组合复用原则，使用委托机制
 *      类适配器---通过继承实现
 *
 * 相关设计模式：
 *      适配器模式和装饰者模式
 *      适配器模式（复用原有的接口，使已有的接口协同工作）和外观模式（定义了新的接口，在现有的系统中提供一个更为方便的访问入口，适配整个子系统，力度更大）对现有的类现存的系统封装
 *
 * 案例实例：220V交流电变成5V直流电
 *
 * jdk案例：XmlAdapter处理xml序列化与反序列化 SpringMVC
 */
public class Test {
    public static void main(String[] args) {
        DC5 dc5 = new PowerAdapter();
        dc5.outputDC5V();
    }
}
